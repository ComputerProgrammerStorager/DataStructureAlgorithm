/*
Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the MagicDictionary class:

MagicDictionary() Initializes the object.
void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.
 

Example 1:

Input
["MagicDictionary", "buildDict", "search", "search", "search", "search"]
[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
Output
[null, null, false, true, false, false]

Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict(["hello", "leetcode"]);
magicDictionary.search("hello"); // return False
magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
magicDictionary.search("hell"); // return False
magicDictionary.search("leetcoded"); // return False
 

Constraints:

1 <= dictionary.length <= 100
1 <= dictionary[i].length <= 100
dictionary[i] consists of only lower-case English letters.
All the strings in dictionary are distinct.
1 <= searchWord.length <= 100
searchWord consists of only lower-case English letters.
buildDict will be called only once before search.
At most 100 calls will be made to search.
*/


/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */

// a naive approach would be just storing the strings and check each and every of them to examine the differences 
class MagicDictionary {
    vector<string> strs;
public:
    /** Initialize your data structure here. */
    MagicDictionary() {
        
    }
    
    void buildDict(vector<string> dictionary) {
        strs = dictionary;
    }
    
    bool search(string searchWord) {
        for (auto s : strs)
        {
            if ( s.size() == searchWord.size() && diff_cnt(s,searchWord) == 1 )
                return true;
        }

        return false;
    }
private:
    // when called make sure s1 and s2 have the same length
    int diff_cnt( string const &s1, string const &s2)
    {
        int m = s1.size(), n = s2.size(), cnt = 0;
        for ( int i = 0; i < m; i++ )
        {
            if ( s1[i] != s2[i] )
                cnt++;
        }
        
        return cnt;
    }
};

// a minor tweak is to use a map which maps len to strings sharing the same len 
class MagicDictionary {
    unordered_map<int, vector<string>> m;
public:
    /** Initialize your data structure here. */
    MagicDictionary() {
        
    }
    
    void buildDict(vector<string> dictionary) {
        for ( auto s : dictionary )
            m[s.size()].push_back(s);
    }
    
    bool search(string searchWord) {
        for (auto s : m[searchWord.size()] )
        {
            if ( s.size() == searchWord.size() && diff_cnt(s,searchWord) == 1 )
                return true;
        }

        return false;
    }
private:
    // when called make sure s1 and s2 have the same length
    int diff_cnt( string const &s1, string const &s2)
    {
        int m = s1.size(), n = s2.size(), cnt = 0;
        for ( int i = 0; i < m; i++ )
        {
            if ( s1[i] != s2[i] )
                cnt++;
        }
        
        return cnt;
    }
};